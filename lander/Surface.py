import math
import random

import pygame


class Surface(pygame.sprite.Sprite):
    def __init__(self, screen_dimension):
        pygame.sprite.Sprite.__init__(self)
        # create the points for the polygon
        landing_pad_points = self.build_landing_pad(
            100, screen_dimension[1] * 0.1, screen_dimension[0], screen_dimension[1]
        )
        # landing_pad_points = [(129.51869240367068, 972.0), (229.51869240367068, 972.0)]
        self.polygon_points = self.random_ground(screen_dimension[1], screen_dimension[0], 20, 50, landing_pad_points)
        # self.polygon_points = [(0, 945.0), (20, 937.8100985202967), (40, 936.7003038859677), (60, 914.6123582164761), (80, 929.2322071853363), (100, 916.8018307232112), (120, 932.9002900668565), (120, 932.9002900668565), (129.51869240367068, 972.0), (229.51869240367068, 972.0), (249.51869240367068, 904.075493556922), (269.5186924036707, 896.2567089823768), (289.5186924036707, 934.4253830564376), (309.5186924036707, 937.753972244948), (329.5186924036707, 896.6264615000946), (349.5186924036707, 903.1767693064398), (369.5186924036707, 916.0807919567537), (389.5186924036707, 899.5811364543505), (409.5186924036707, 940.6114480507306), (429.5186924036707, 904.0872868452345), (449.5186924036707, 920.7878560275955), (469.5186924036707, 934.2526126844509), (489.5186924036707, 927.3995542752689), (509.5186924036707, 940.764751450086), (529.5186924036707, 921.8253150289609), (549.5186924036707, 897.9109591283136), (569.5186924036707, 931.6885361101442), (589.5186924036707, 931.2104081000263), (609.5186924036707, 897.8631792755536), (629.5186924036707, 921.8605819557661), (649.5186924036707, 944.3534506254239), (669.5186924036707, 941.3778434477123), (689.5186924036707, 943.2914139955041), (709.5186924036707, 904.6464960077461), (729.5186924036707, 937.3461805600847), (749.5186924036707, 939.3258051802276), (769.5186924036707, 906.3334557941196), (789.5186924036707, 932.4270542504432), (809.5186924036707, 909.2963268565734), (829.5186924036707, 925.6091783254695), (849.5186924036707, 925.5026327652525), (869.5186924036707, 911.3718504790058), (889.5186924036707, 942.389756253277), (909.5186924036707, 895.2520509880571), (929.5186924036707, 907.8684711909925), (949.5186924036707, 920.6971971152893), (969.5186924036707, 910.7858143976496), (989.5186924036707, 927.2368646698035), (1009.5186924036707, 936.3280579467398), (1029.5186924036707, 923.2563303656142), (1049.5186924036707, 936.7979153522385), (1069.5186924036707, 900.5246704111729), (1089.5186924036707, 896.750339711688), (1109.5186924036707, 938.0535121765859), (1129.5186924036707, 929.852151114186), (1149.5186924036707, 918.1922580218802), (1169.5186924036707, 943.9689932169554), (1189.5186924036707, 939.0891469700823), (1209.5186924036707, 916.322316834655), (1229.5186924036707, 895.7975471695148), (1249.5186924036707, 930.4824821479036), (1269.5186924036707, 936.656786105789), (1289.5186924036707, 943.194734647069), (1309.5186924036707, 935.1115362290233), (1329.5186924036707, 902.5390281807494), (1349.5186924036707, 905.5870286439185), (1369.5186924036707, 931.7178295334163), (1389.5186924036707, 910.6905771576194), (1409.5186924036707, 938.4513795772131), (1429.5186924036707, 931.0288487634809), (1449.5186924036707, 923.9376869451124), (1469.5186924036707, 895.4326793965174), (1489.5186924036707, 896.2305591922118), (1509.5186924036707, 901.381285425918), (1529.5186924036707, 937.3724362975287), (1549.5186924036707, 915.8004302570525), (1569.5186924036707, 897.8389705339004), (1589.5186924036707, 939.2761743815066), (1609.5186924036707, 919.7136801632586), (1629.5186924036707, 942.1394030070151), (1649.5186924036707, 916.9034421887538), (1669.5186924036707, 916.3039628026745), (1689.5186924036707, 913.3560899692197), (1709.5186924036707, 911.9292309892385), (1729.5186924036707, 900.4575818101556), (1749.5186924036707, 898.8894930208096), (1769.5186924036707, 925.418104429092), (1789.5186924036707, 907.3787965985712), (1809.5186924036707, 916.4700262623086), (1829.5186924036707, 937.4623372719805), (1849.5186924036707, 899.649025354206), (1869.5186924036707, 907.3882027704908), (1889.5186924036707, 929.9344079403875), (1909.5186924036707, 921.9538263158285), (1929.5186924036707, 896.3795660562994), (1949.5186924036707, 934.5054845624052), (1969.5186924036707, 940.1529446078525), (1921, 945.0), (1921, 1090), (0, 1090)]
        # create the canvas where the polygon will be painted, make it
        self.image = pygame.Surface([screen_dimension[0], screen_dimension[1]])
        self.image.fill((255, 255, 255))
        self.image.set_colorkey((255, 255, 255))
        # create the polygon using the random points
        self.polygon_rect = pygame.draw.polygon(self.image, (192, 192, 192), self.polygon_points)

        landing_pad_rect = self.get_landing_platform_rect(landing_pad_points, 20)
        self.landing_pad = pygame.draw.rect(self.image, (0, 255, 0), landing_pad_rect)
        self.centre_landing_pad = (
            (landing_pad_points[0][0] + landing_pad_points[1][0]) / 2,
            (landing_pad_points[0][1] + landing_pad_points[1][1]) / 2,
        )
        self.rect = self.image.get_rect()

    def random_ground(self, screen_height, screen_width, spacing, variation, landing_pad):
        # set out the boundaries
        highest_point = screen_height - (screen_height / 8)
        lowest_point = screen_height + 10
        left_most_point = 0
        right_most_point = screen_width + 1
        ans = [(left_most_point, highest_point)]
        number_of_points = screen_width / spacing
        i = 0

        while i < number_of_points:
            rand = random.random()
            rand = rand * variation
            last_x_point = ans[i][0]
            if last_x_point > landing_pad[0][0] and last_x_point < landing_pad[1][0]:
                ans[-1] = ans[-2]
                ans.append(landing_pad[0])
                ans.append(landing_pad[1])
                i = i + 2
                continue
            next_y_point = highest_point - rand
            ans.append((last_x_point + spacing, +next_y_point))
            i = i + 1

        ans.append((right_most_point, highest_point))
        ans.append((right_most_point, lowest_point))
        ans.append((left_most_point, lowest_point))
        return ans

    def build_landing_pad(self, width, height, screen_width, screen_height):
        # width in pixels
        buffer = screen_width * 0.05
        mx = screen_width - buffer - width
        mn = buffer
        rand = random.random()
        starting_point = mx - (rand * (mx - mn))
        return [(starting_point, screen_height - height), (starting_point + width, screen_height - height)]

    def get_landing_platform_rect(self, landing_pad_points, height):
        x = landing_pad_points[0][0]
        y = landing_pad_points[0][1] - height / 2
        width = landing_pad_points[1][0] - landing_pad_points[0][0]

        return pygame.Rect(x, y, width, height)
